def fibonacci(n):
    if n <= 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

n = 10
for i in range(n):
    print(fibonacci(i))
---
import heapq

class Node:
    def __init__(self, freq, symbol, left=None, right=None):
        self.freq = freq
        self.symbol = symbol
        self.left = left
        self.right = right
        self.huff = ''

    def __lt__(self, other):
        return self.freq < other.freq

def print_huffman_codes(node, val=''):
    new_val = val + str(node.huff)
    if node.left:
        print_huffman_codes(node.left, new_val)
    if node.right:
        print_huffman_codes(node.right, new_val)
    if not node.left and not node.right:
        print(f"{node.symbol} -> {new_val}")

chars = ['a', 'b', 'c', 'd', 'e', 'f']
freq = [5, 9, 12, 13, 16, 45]
nodes = [Node(freq[i], chars[i]) for i in range(len(chars))]

while len(nodes) > 1:
    left = heapq.heappop(nodes)
    right = heapq.heappop(nodes)
    left.huff = 0
    right.huff = 1
    new_node = Node(left.freq + right.freq, left.symbol + right.symbol, left, right)
    heapq.heappush(nodes, new_node)

print_huffman_codes(nodes[0])
---
def fractional_k(item,capacity):
	total_value=0.0
	selected_item=[]
	for item in items:
		item['ratio']=item['value']/item['weight']
	items.sort(key=lambda x:x['ratio'],reverse=True)

	for item in items:
		if capacity>=item['weight']:
			capacity-=item['weight']
			total_value+=item['value']
			selected_item.append((item['weight'],item['value']))
		else:
			fraction=capacity/item['weight']
			capacity-=fraction*item['weight']
			total_value+=fraction*item['value']
			selected_item.append((fraction*item['weight'],fraction*item['value']))
	return selected_item,total_value

			
			
	

n=int(input("enter the total no of items:"))
weight=values=items=[]
for i in range(n):
	weight=float(input(f"enter the weight for {i+1} item:"))
	value=float(input(f"enter the value for {i+1} item:"))
	items.append({'weight':weight,'value':value})
capacity=int(input("enter the capacity of the bag:"))
selected_items,total_value=fractional_k(items,capacity)
print("selected_items",selected_items)
print("total_value",total_value)

	
---

def knapsack_01(values, weights, capacity):
	n=len(values)
	table=[[0 for _ in range(capacity+1)] for _ in range(n+1)]
	
	for i in range(1,n+1):
		for w in range(capacity+1):
			if weights[i-1]<=w:
				table[i][w]=max(table[i-1][w],table[i-1][w-weights[i-1]]+values[i-1])
			else:
				table[i][w]=table[i-1][w]

	selected_items=[]
	i,w = n,capacity
	while i>0 and w>0:
		if table[i][w] != table[i-1][w]:
			selected_items.append(i-1)
			w-=weights[i-1]
		i-=1
	return table[n][capacity], selected_items
	
	

# Example usage:
values = [60, 100, 120]
weights = [10, 20, 30]
capacity = 50
max_value, selected_items = knapsack_01(values, weights, capacity)
print("Maximum value:", max_value)
print("Selected items:", selected_items)

---

import time
start = time.time()

def print_solution(board):
    for row in board:
        print(" ".join(row))
    print("\n")

def is_safe(board, row, col, n):
    # Check if no Queen can attack in the same column
    for i in range(row):
        if board[i][col] == 'Q':
            return False
    
    # Check if no Queen can attack in the left diagonal
    for i, j in zip(range(row, -1, -1), range(col, -1, -1)):
        if board[i][j] == 'Q':
            return False
    
    # Check if no Queen can attack in the right diagonal
    for i, j in zip(range(row, -1, -1), range(col, n)):
        if board[i][j] == 'Q':
            return False
    
    return True

def solve_n_queens(board, row, n):
    if row == n:
        # All Queens are placed successfully, print the solution
        print_solution(board)
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 'Q'
            solve_n_queens(board, row + 1, n)
            board[row][col] = '.'  # Backtrack

def n_queens(n):
    if n <= 0:
        return []

    board = [['.' for _ in range(n)] for _ in range(n)]
    solve_n_queens(board, 0, n)

n = 4  # Change this to the desired N value
n_queens(n)

end = time.time()
print("\nExecution time is: {}ms".format((end-start)*10**3))


---

import random
import time

def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    
    pivot = arr[0]
    left = [x for x in arr[1:] if x <= pivot]
    right = [x for x in arr[1:] if x > pivot]
    
    return quick_sort(left) + [pivot] + quick_sort(right)

def randomized_quick_sort(arr):
    if len(arr) <= 1:
        return arr

    pivot_index = random.randint(0, len(arr) - 1)
    pivot = arr[pivot_index]
    left = [x for x in arr[:pivot_index] + arr[pivot_index+1:] if x <= pivot]
    right = [x for x in arr[:pivot_index] + arr[pivot_index+1:] if x > pivot]

    return randomized_quick_sort(left) + [pivot] + randomized_quick_sort(right)

def analyze_quick_sort(arr, variant="deterministic"):
    start_time = time.time()
    if variant == "deterministic":
        sorted_arr = quick_sort(arr)
    elif variant == "randomized":
        sorted_arr = randomized_quick_sort(arr)
    else:
        print("Invalid variant specified")
        return

    end_time = time.time()
    execution_time = end_time - start_time
    return sorted_arr, execution_time

# Test the analysis with a sample array
arr = [3, 6, 8, 10, 1, 2, 1]
sorted_arr_det, time_det = analyze_quick_sort(arr, variant="deterministic")
sorted_arr_rand, time_rand = analyze_quick_sort(arr, variant="randomized")

print("Deterministic Quick Sort:")
print("Sorted Array:", sorted_arr_det)
print("Execution Time: {:.6f} seconds".format(time_det))

print("\nRandomized Quick Sort:")
print("Sorted Array:", sorted_arr_rand)
print("Execution Time: {:.6f} seconds".format(time_rand))